{
    "_comment": "DO NOT EDIT: FILE GENERATED AUTOMATICALLY BY PTERODACTYL PANEL - PTERODACTYL.IO",
    "meta": {
        "version": "PTDL_v2",
        "update_url": null
    },
    "exported_at": "2025-06-23T20:47:50+02:00",
    "name": "Pterodactyl Nginx + Node Egg",
    "author": "YmoT@tuta.com",
    "description": "Pterodactyl Nginx Egg\r\n\r\nThe Pterodactyl Nginx Egg is a web server solution for Pterodactyl, featuring Nginx, Node.js, Git support, and Cloudflare Tunnel integration. It supports AMD64 & ARM64 architectures. Key Features:\r\n\u2705 Git integration for automatic deployment\r\n\u2705 Cloudflare Tunnel support for secure remote access\r\n\u2705 HTTPS configuration support\r\n\u2705 Automatic updates for Git repositories",
    "features": null,
    "docker_images": {
        "ririkoai/pterodactyl-nginx-node:node22": "ririkoai/pterodactyl-nginx-node:node22"
    },
    "file_denylist": [],
    "startup": "./start-modules.sh",
    "config": {
        "files": "{\r\n    \"nginx/conf.d/default.conf\": {\r\n        \"parser\": \"file\",\r\n        \"find\": {\r\n            \"    listen\": \"    listen {{server.build.default.port}};\"\r\n        }\r\n    }\r\n}",
        "startup": "{\r\n    \"done\": \"Services successfully launched\"\r\n}",
        "logs": "{\r\n    \"location\": \"logs/latest.log\"\r\n}",
        "stop": "^C & ^C"
    },
    "scripts": {
        "installation": {
            "script": "#!\/bin\/bash\r\n\r\n# [SETUP] Install necessary packages, including git\r\necho -e \"[SETUP] Install packages\"\r\napt-get update -qq > \/dev\/null 2>&1 && apt-get install -qq > \/dev\/null 2>&1 -y git wget\r\n\r\n# Change to server directory\r\ncd \/mnt\/server\r\n\r\n# [SETUP] Create necessary folders\r\necho -e \"[SETUP] Create folders\"\r\nmkdir -p logs tmp www\r\n\r\n# Clone the default repository into a temporary directory\r\necho \"[Git] Cloning default repository 'https:\/\/github.com\/earnestangel\/pterodactyl-nginx-node-egg' into temporary directory.\"\r\ngit clone https:\/\/github.com\/earnestangel\/pterodactyl-nginx-node-egg \/mnt\/server\/gtemp > \/dev\/null 2>&1 && echo \"[Git] Repository cloned successfully.\" || { echo \"[Git] Error: Default repository clone failed.\"; exit 21; }\r\n\r\n# Copy only nginx related folders and files from the temporary repository\r\necho \"[Git] Copying folder and files from default repository.\"\r\ncp -r \/mnt\/server\/gtemp\/nginx \/mnt\/server || { echo \"[Git] Error: Copying 'nginx' folder failed.\"; exit 22; }\r\ncp -r \/mnt\/server\/gtemp\/modules \/mnt\/server || { echo \"[Git] Error: Copying 'modules' folder failed.\"; exit 22; }\r\ncp \/mnt\/server\/gtemp\/start-modules.sh \/mnt\/server || { echo \"[Git] Error: Copying 'start-modules.sh' file failed.\"; exit 22; }\r\ncp \/mnt\/server\/gtemp\/LICENSE \/mnt\/server || { echo \"[Git] Error: Copying 'LICENSE' file failed.\"; exit 22; }\r\nchmod +x \/mnt\/server\/start-modules.sh\r\nfind \/mnt\/server\/modules -type f -name \"*.sh\" -exec chmod +x {} \\;\r\n\r\n# Remove the temporary cloned repository\r\nrm -rf \/mnt\/server\/gtemp\r\n\r\n# Check if GIT_ADDRESS is set\r\nif [ -z \"${GIT_ADDRESS}\" ]; then\r\n    echo \"[Git] Info: GIT_ADDRESS is not set.\"\r\n    echo \"[Git] Git operations are disabled. Skipping Git actions.\"\r\nelse\r\n    # Add .git suffix to GIT_ADDRESS if it's not present\r\n    if [[ ${GIT_ADDRESS} != *.git ]]; then\r\n        GIT_ADDRESS=\"${GIT_ADDRESS}.git\"\r\n        echo \"[Git] Added .git suffix to GIT_ADDRESS: ${GIT_ADDRESS}\"\r\n    fi\r\n\r\n    # If username and access token are provided, use authenticated access\r\n    if [ -n \"${USERNAME}\" ] && [ -n \"${ACCESS_TOKEN}\" ]; then\r\n        echo \"[Git] Using authenticated Git access.\"\r\n        \r\n        # Extract the domain and the rest of the URL, ensuring the correct format\r\n        GIT_DOMAIN=$(echo \"${GIT_ADDRESS}\" | cut -d\/ -f3)\r\n        GIT_REPO=$(echo \"${GIT_ADDRESS}\" | cut -d\/ -f4-) # Rest of the URL after the domain\r\n        \r\n        # Construct the authenticated Git URL\r\n        GIT_ADDRESS=\"https:\/\/${USERNAME}:${ACCESS_TOKEN}@${GIT_DOMAIN}\/${GIT_REPO}\"\r\n        \r\n        echo \"[Git] Updated GIT_ADDRESS for authenticated access: ${GIT_ADDRESS}\"\r\n    else\r\n        echo \"[Git] Using anonymous Git access.\"\r\n    fi\r\n\r\n    # Check if the 'www' directory exists, if not create it\r\n    if [ ! -d \/mnt\/server\/www ]; then\r\n        echo \"[Git] Creating \/mnt\/server\/www directory.\"\r\n        mkdir -p \/mnt\/server\/www\r\n        else\r\n        rm -R \/mnt\/server\/www && mkdir -p \/mnt\/server\/www\r\n    fi\r\n\r\n    cd \/mnt\/server\/www || { echo \"[Git] Error: Could not access \/mnt\/server\/www directory.\"; exit 1; }\r\n\r\n    if [ \"$(ls -A \/mnt\/server\/www)\" ]; then\r\n        echo \"[Git] \/mnt\/server\/www directory is not empty.\"\r\n        \r\n        # Check if .git directory exists in 'www'\r\n        if [ -d .git ]; then\r\n            echo \"[Git] .git directory exists in 'www'.\"\r\n\r\n            # Check if .git\/config exists in 'www'\r\n            if [ -f .git\/config ]; then\r\n                echo \"[Git] Loading repository info from git config in 'www'.\"\r\n                ORIGIN=$(git config --get remote.origin.url)\r\n            else\r\n                echo \"[Git] Error: .git\/config not found in 'www'. The directory may contain files, but it's not a valid Git repository.\"\r\n                exit 10\r\n            fi\r\n        else\r\n            echo \"[Git] Error: Directory contains files but no Git repository found in 'www'.\"\r\n            exit 11\r\n        fi\r\n\r\n        # Check if origin matches the provided GIT_ADDRESS\r\n        if [ \"${ORIGIN}\" == \"${GIT_ADDRESS}\" ]; then\r\n            echo \"[Git] Repository origin matches. Pulling latest changes from ${GIT_ADDRESS} in 'www'.\"\r\n            git pull || { echo \"[Git] Error: git pull failed for 'www'.\"; exit 12; }\r\n        else\r\n            echo \"[Git] Error: Repository origin does not match the provided GIT_ADDRESS in 'www'.\"\r\n            exit 13\r\n        fi\r\n    else\r\n        # The directory is empty, clone the repository\r\n        echo \"[Git] \/mnt\/server\/www directory is empty. Cloning ${GIT_ADDRESS} into \/mnt\/server\/www.\"\r\n        git clone ${GIT_ADDRESS} . > \/dev\/null 2>&1 && echo \"[Git] Repository cloned successfully.\" || { echo \"[Git] Error: git clone failed for 'www'.\"; exit 14; }\r\n    fi\r\nfi\r\n\r\necho -e \"[DONE] Everything has been installed successfully\"\r\necho -e \"[INFO] You can now start the nginx web server\"",
            "container": "debian:bookworm-slim",
            "entrypoint": "bash"
        }
    },
    "variables": [
        {
            "name": "Enable LogCleaner Module",
            "description": "Set to true to run the log cleanup module on container startup, or false to disable it.",
            "env_variable": "LOGCLEANER_STATUS",
            "default_value": "1",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|boolean",
            "field_type": "boolean"
        },
        {
            "name": "Enable Git Module",
            "description": "Set to true to enable the Git update module, or false to disable it.",
            "env_variable": "GIT_STATUS",
            "default_value": "0",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|boolean",
            "field_type": "text"
        },
        {
            "name": "Git Repo Address",
            "description": "Git repo to clone\r\n\r\nI.E. https:\/\/github.com\/Ym0T\/pterodactyl-nginx-egg",
            "env_variable": "GIT_ADDRESS",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string",
            "field_type": "text"
        },
        {
            "name": "Git Branch",
            "description": "What branch to pull from github.\r\n\r\nDefault is blank to pull the repo default branch",
            "env_variable": "BRANCH",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string",
            "field_type": "text"
        },
        {
            "name": "Git Username",
            "description": "Username to auth with git.",
            "env_variable": "USERNAME",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string",
            "field_type": "text"
        },
        {
            "name": "Git Access Token",
            "description": "Password to use with git.\r\n\r\nIt's best practice to use a Personal Access Token.\r\nhttps:\/\/github.com\/settings\/tokens\r\nhttps:\/\/gitlab.com\/-\/profile\/personal_access_tokens",
            "env_variable": "ACCESS_TOKEN",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string",
            "field_type": "text"
        },
        {
            "name": "Enable Cloudflare Tunnel",
            "description": "Set to true to start the Cloudflared tunnel on container startup, or false to skip it.",
            "env_variable": "CLOUDFLARED_STATUS",
            "default_value": "0",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|boolean",
            "field_type": "text"
        },
        {
            "name": "Cloudflared Tunnel Token",
            "description": "The authentication token used to connect to the Cloudflare Tunnel service (typically starts with \"ey...\").",
            "env_variable": "CLOUDFLARED_TOKEN",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string|regex:\/^[A-Za-z0-9_-]+$\/",
            "field_type": "text"
        },
        {
            "name": "NPM Start Command",
            "description": "The command to start your Node.js application (e.g., 'npm start' or 'node app.js').",
            "env_variable": "NPM_START_CMD",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|string",
            "field_type": "text"
        },
        {
            "name": "NPM Run Complete Message",
            "description": "The message that indicates your Node.js application has started successfully (used to determine when the startup process is complete).",
            "env_variable": "NPM_DONE",
            "default_value": "Server is running",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|string",
            "field_type": "text"
        }
    ]
}